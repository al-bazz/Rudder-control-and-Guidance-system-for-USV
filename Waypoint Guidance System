import numpy as np
import matplotlib.pyplot as plt

class WaypointGuidanceSystem:
    def __init__(self, x0, y0, waypoints):
        self.x = x0
        self.y = y0
        self.waypoints = np.array(waypoints)
        self.current_waypoint_index = 0
        self.max_speed = 1 # Maximum speed of the vehicle in m/s
        self.dt = 0.1 # Time step in seconds
        
    def update(self):
        # Check if the current waypoint has been reached
        if np.abs(self.x - self.waypoints[self.current_waypoint_index, 0]) < 1e-2 and np.abs(self.y - self.waypoints[self.current_waypoint_index, 1]) < 1e-2:
            # If so, move to the next waypoint
            self.current_waypoint_index += 1
            if self.current_waypoint_index >= self.waypoints.shape[0]:
                # End the mission if all waypoints have been reached
                return False
                
        # Calculate the direction vector to the next waypoint
        direction = self.waypoints[self.current_waypoint_index] - np.array([self.x, self.y])
        direction = direction / np.linalg.norm(direction)
        
        # Update the vehicle's position
        self.x += direction[0] * self.max_speed * self.dt
        self.y += direction[1] * self.max_speed * self.dt
        
        return True

# Initialize the guidance system
waypoint_guidance_system = WaypointGuidanceSystem(0, 0, [[10, 10], [0, 10], [-10, 0]])

# Simulate the guidance system for 50 time steps
x = []
y = []
for i in range(50):
    x.append(waypoint_guidance_system.x)
    y.append(waypoint_guidance_system.y)
    if not waypoint_guidance_system.update():
        break

# Plot the simulation results
plt.plot(x, y, '-o')
plt.plot(waypoint_guidance_system.waypoints[:, 0], waypoint_guidance_system.waypoints[:, 1], 'ro')
plt.xlabel('x (m)')
plt.ylabel('y (m)')
plt.show()
